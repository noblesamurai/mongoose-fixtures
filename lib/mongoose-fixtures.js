// Generated by CoffeeScript 1.4.0
var MongooseFixtures, async, fs, mongoose, path,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

fs = require('fs');

path = require('path');

mongoose = require('mongoose');

async = require('async');

MongooseFixtures = (function() {

  function MongooseFixtures() {
    this._removeCollection = __bind(this._removeCollection, this);

    this._insertCollection = __bind(this._insertCollection, this);

    this.loadDir = __bind(this.loadDir, this);

    this.loadFile = __bind(this.loadFile, this);

    this.loadObject = __bind(this.loadObject, this);

    this.load = __bind(this.load, this);

  }

  MongooseFixtures.prototype.load = function(data, db, callback) {
    var stat;
    if (typeof db === 'function') {
      callback = db;
      db = mongoose.connection;
    }
    if (typeof data === 'object') {
      return this.loadObject(data, db, callback);
    } else if (typeof data === 'string') {
      stat = fs.statSync(data);
      if (stat.isDirectory()) {
        return this.loadDir(data, db, callback);
      } else {
        return this.loadFile(data, db, callback);
      }
    } else {
      return callback(new Error('data must be an object, array or string (file or dir path)'));
    }
  };

  MongooseFixtures.prototype.loadObject = function(data, db, callback) {
    var iterator,
      _this = this;
    iterator = function(modelName, next) {
      return _this._insertCollection(modelName, data[modelName], db, next);
    };
    return async.each(Object.keys(data), iterator, callback);
  };

  MongooseFixtures.prototype.loadFile = function(file, db, callback) {
    var data;
    data = require(file);
    return this.load(data, db, callback);
  };

  MongooseFixtures.prototype.loadDir = function(dir, db, callback) {
    var _this = this;
    return fs.readdir(dir, function(err, files) {
      var iterator;
      if (err) {
        return callback(err);
      } else {
        iterator = function(file, next) {
          var absolutePath;
          absolutePath = path.join(dir, file);
          return _this.loadFile(absolutePath, db, next);
        };
        return async.each(files, iterator, callback);
      }
    });
  };

  MongooseFixtures.prototype._insertCollection = function(modelName, data, db, callback) {
    var _this = this;
    return this._removeCollection(modelName, db, function(err) {
      var Model, i, items, iterator, _i, _len;
      if (err) {
        return callback(err);
      } else {
        items = new Array();
        if (Array.isArray(data)) {
          items = data;
        } else {
          for (_i = 0, _len = data.length; _i < _len; _i++) {
            i = data[_i];
            items.push(data[i]);
          }
        }
        Model = db.model(modelName);
        iterator = function(item, next) {
          var doc;
          doc = new Model(item);
          return doc.save(function(err) {
            if (err) {
              return next(err);
            } else {
              return next();
            }
          });
        };
        return async.each(items, iterator, callback);
      }
    });
  };

  MongooseFixtures.prototype._removeCollection = function(modelName, db, callback) {
    var Model;
    Model = db.model(modelName);
    return Model.collection.remove(callback);
  };

  return MongooseFixtures;

})();

module.exports = new MongooseFixtures();
